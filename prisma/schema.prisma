// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String
  email    String  @unique
  password String?
  avatar   String?
  phone    String? @unique

  kakaoId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role? @relation(fields: [roleId], references: [id])
  roleId Int?

  userProgress   UserProgress[]
  purchase       Purchase[]
  stripeCustomer StripeCustomer?
  TossCustomer   TossCustomer?
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String?
  price       Float?
  thumbnail   String?
  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  chapters    Chapter[]
  attachments Attachment[]
  purchase    Purchase[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProgress UserProgress[]
  muxData      MuxData?
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
}

model UserProgress {
  id String @id @default(uuid())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Purchase {
  id     String @id @default(uuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id     String @id @default(uuid())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TossCustomer {
  id String @id @default(uuid())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  orderId    String @unique
  paymentKey String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
